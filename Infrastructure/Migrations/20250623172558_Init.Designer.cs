// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RideHailing.Infrastructure.DataBaseContext;

#nullable disable

namespace RideHailing.Infrastructure.Migrations
{
    [DbContext(typeof(RideHandlingDBContext))]
    [Migration("20250623172558_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RideHailing.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Last4")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Token")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("RideHailing.Domain.Entities.RideType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseFare")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PerKilometerRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PerMinuteRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("RideTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseFare = 5.00m,
                            Name = "Standard",
                            PerKilometerRate = 1.50m,
                            PerMinuteRate = 0.50m
                        },
                        new
                        {
                            Id = 2,
                            BaseFare = 10.00m,
                            Name = "Luxury",
                            PerKilometerRate = 3.00m,
                            PerMinuteRate = 1.00m
                        },
                        new
                        {
                            Id = 3,
                            BaseFare = 3.00m,
                            Name = "Carpool",
                            PerKilometerRate = 1.00m,
                            PerMinuteRate = 0.30m
                        });
                });

            modelBuilder.Entity("RideHailing.Domain.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DropOffLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Fare")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PickUpLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RideTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("RiderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RideTypeId");

                    b.HasIndex("RiderId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("RideHailing.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<decimal>("WalletBalance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RideHailing.Domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("RideHailing.Domain.Entities.User", "User")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RideHailing.Domain.Entities.Trip", b =>
                {
                    b.HasOne("RideHailing.Domain.Entities.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RideHailing.Domain.Entities.RideType", "RideType")
                        .WithMany("Trips")
                        .HasForeignKey("RideTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RideHailing.Domain.Entities.User", "Rider")
                        .WithMany("Trips")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("RideType");

                    b.Navigation("Rider");
                });

            modelBuilder.Entity("RideHailing.Domain.Entities.RideType", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("RideHailing.Domain.Entities.User", b =>
                {
                    b.Navigation("PaymentMethods");

                    b.Navigation("Trips");
                });
#pragma warning restore 612, 618
        }
    }
}
